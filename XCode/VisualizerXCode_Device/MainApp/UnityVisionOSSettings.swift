// GENERATED BY BUILD
import Foundation
import SwiftUI
import PolySpatialRealityKit
import UnityFramework

extension UnityPolySpatialApp {
    func initialWindowName() -> String { return "Unbounded" }

    func getAllAvailableWindows() -> [String] { return ["Bounded-1.000x1.000x1.000", "Unbounded"] }

    func getAvailableWindowsForMatch() -> [simd_float3] { return [] }

    func displayProviderParameters() -> DisplayProviderParameters { return .init(
            framebufferWidth: 1920,
            framebufferHeight: 1080,
            leftEyePose: .init(position: .init(x: 0, y: 0, z: 0),
                               rotation: .init(x: 0, y: 0, z: 0, w: 1)),
            rightEyePose: .init(position: .init(x: 0, y: 0, z: 0),
                                rotation: .init(x: 0, y: 0, z: 0, w: 1)),
            leftProjectionHalfAngles: .init(left: -1, right: 1, top: 1, bottom: -1),
            rightProjectionHalfAngles: .init(left: -1, right: 1, top: 1, bottom: -1)
        )
    }

    
    @SceneBuilder
    var mainScenePart0: some Scene {

        ImmersiveSpace(id: "Unbounded", for: UUID.self) { uuid in
            PolySpatialContentViewWrapper()
                .environment(\.pslWindow, PolySpatialWindow(uuid.wrappedValue, "Unbounded", .init(1.000, 1.000, 1.000)))
            KeyboardTextField().frame(width: 0, height: 0).modifier(LifeCycleHandlerModifier())
        } defaultValue: { UUID() }  .upperLimbVisibility(.hidden)
        WindowGroup(id: "Bounded-1.000x1.000x1.000", for: UUID.self) { uuid in
            PolySpatialContentViewWrapper()
                .environment(\.pslWindow, PolySpatialWindow(uuid.wrappedValue, "Bounded-1.000x1.000x1.000", .init(1.000, 1.000, 1.000)))
            KeyboardTextField().frame(width: 0, height: 0).modifier(LifeCycleHandlerModifier())
        } defaultValue: { UUID() } .windowStyle(.volumetric).defaultSize(width: 1.000, height: 1.000, depth: 1.000, in: .meters) 
       SwiftUISampleInjectedScene.scene
    }

    @SceneBuilder
    var mainScene: some Scene {
        mainScenePart0
    }


    struct LifeCycleHandlerModifier: ViewModifier {
        func body(content: Content) -> some View {
            content
                .onOpenURL(perform: { url in
                    UnityLibrary.instance?.setAbsoluteUrl(url.absoluteString)
                })
        }
    }
}
